Ans_query <- function(quesId){
ans_df <- data.frame(QuestionID=integer(), AnswerID=integer(),
CreationDate=POSIXct(), Score=integer(), Accepted=logical())
i <- 1
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/answers?key=", key, "&pagesize=100&order=desc&sort=activity&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
qId <- lapply(len, function(x){wbpg_items[[x]][["question_id"]]})
aId <- lapply(len, function(x){wbpg_items[[x]][["answer_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
isAcc <- lapply(len, function(x){wbpg_items[[x]][["is_accepted"]]})
df <- data.frame(QuestionID=unlist(qId), AnswerID=unlist(aId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc), Accepted=unlist(isAcc))
ans_df <- rbind(ans_df, df)
i <- i+1
}
ans_df
}
d_df<- Ans_query(quesId)
View(d_df)
View(d_df)
View(d_df)
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=activity&access_token=", token, "&tagged=r&site=stackoverflow")
View(Ques_df)
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[1], "/comments?key=", key, "&pagesize=100&order=desc&sort=activity&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
View(wbpg)
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[1], "/comments?key=", key, "&pagesize=100&order=desc&sort=activity&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[1], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
View(wbpg_items)
len <- as.vector(1:length(wbpg_items))
i <- i+1
i <- 1
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[1], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
View(cmt_df)
i <- 1
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
i <- 1
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[1], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
View(df)
fromDate <- "2021-01-01"
toDate <- "2021-01-02"
pg <-1
wbpg <- paste0("https://api.stackexchange.com/2.2/questions?key=", key, "&page=", pg, "&pagesize=100&fromdate=", fromDate, "&todate=", toDate, "&order=desc&sort=activity&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
View(wbpg_jsonParsed)
fromDate <- "2021-01-01"
fromDate <- as.numeric(as.POSIXct(fromDate, tz="UTC"))
toDate <- "2021-01-02"
toDate <- as.numeric(as.POSIXct(toDate, tz="UTC"))
pg <-1
wbpg <- paste0("https://api.stackexchange.com/2.2/questions?key=", key, "&page=", pg, "&pagesize=100&fromdate=", fromDate, "&todate=", toDate, "&order=desc&sort=activity&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
View(wbpg_items)
View(Ques_df)
i <- 1
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(len==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
quesId <- Ques_df$ID
i <- 1
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(len==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
quesId <- Ques_df$ID
i <- 1
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(length(wbpg_items)==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
View(cmt_df)
Comnt_query <- function(quesId){
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(length(wbpg_items)==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
cmt_df
}
asdfff <- Comnt_query(quesId)
# Obtaining Question IDs from `Query_df` function
questionId <- Ques_df$ID
Comnt_query <- function(quesId){
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(length(wbpg_items)==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
cmt_df
}
asdfff <- Comnt_query(questionId)
Comnt_query <- function(quesId){
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
i <- 1
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(length(wbpg_items)==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
cmt_df
}
Comnt_query <- function(quesId){
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
i <- 1
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(length(wbpg_items)==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
cmt_df
}
asdfff <- Comnt_query(questionId)
rm(list = ls())
key <- "SX945TWflISfN*DzZ*G53w(("
token <- "ixiOsNGGzzlmAyggyT1rRA))"
library(httr)
library(rlist)
library(jsonlite)
library(dplyr)
library(lubridate)
Ques_query <- function(fromDate, toDate, pg=1){
fromDate <- as.numeric(as.POSIXct(fromDate, tz="UTC"))
toDate <- as.numeric(as.POSIXct(toDate, tz="UTC"))
ques_df <- data.frame(ID=integer(), Title=character(), View_Count=integer(),
Answer=logical(), Link=character())
repeat{
wbpg <- paste0("https://api.stackexchange.com/2.2/questions?key=", key, "&page=", pg, "&pagesize=100&fromdate=", fromDate, "&todate=", toDate, "&order=desc&sort=activity&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
if(length(wbpg_items)==0){
break
}
len <- as.vector(1:length(wbpg_items))
quesId <- lapply(len, function(x){wbpg_items[[x]][["question_id"]]})
quesTitle <- lapply(len, function(x){wbpg_items[[x]][["title"]]})
quesViewCount <- lapply(len, function(x){wbpg_items[[x]][["view_count"]]})
quesAnswered <- lapply(len, function(x){wbpg_items[[x]][["is_answered"]]})
quesLink <- lapply(len, function(x){wbpg_items[[x]][["link"]]})
df <- data.frame(ID=unlist(quesId), Title=unlist(quesTitle), View_Count=unlist(quesViewCount),
Answer=unlist(quesAnswered), Link=unlist(quesLink))
ques_df <- rbind(ques_df, df)
pg <- pg + 1
}
ques_df
}
# Obtaining list of Question IDs whose Answer is PRESENT on Stack Overflow
Ques_df <- Ques_query("2021-01-01", "2021-01-02")
temp_ques_df <- filter(Ques_df, Answer==TRUE)
questionId <- temp_ques_df$ID
Ans_query <- function(quesId){
ans_df <- data.frame(QuestionID=integer(), AnswerID=integer(),
CreationDate=POSIXct(), Score=integer(), Accepted=logical())
i <- 1
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/answers?key=", key, "&pagesize=100&order=desc&sort=activity&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
qId <- lapply(len, function(x){wbpg_items[[x]][["question_id"]]})
aId <- lapply(len, function(x){wbpg_items[[x]][["answer_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
isAcc <- lapply(len, function(x){wbpg_items[[x]][["is_accepted"]]})
df <- data.frame(QuestionID=unlist(qId), AnswerID=unlist(aId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc), Accepted=unlist(isAcc))
ans_df <- rbind(ans_df, df)
i <- i+1
}
ans_df
}
asdm <- Ans_query(questionId)
# Obtaining Question IDs from `Query_df` function
questionId <- Ques_df$ID
Comnt_query <- function(quesId){
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
i <- 1
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(length(wbpg_items)==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
cmt_df
}
meet <- Comnt_query(questionId)
View(meet)
rm(list = ls())
install.packages(c("backports", "broom", "cli", "cpp11", "crayon", "data.table", "dbplyr", "desc", "dplyr", "farver", "fastmap", "forcats", "gert", "ggforce", "ggraph", "htmltools", "isoband", "ISOcodes", "knitr", "lifecycle", "lubridate", "MatrixModels", "matrixStats", "memoise", "mime", "packageRank", "pillar", "pkgload", "promises", "ps", "quantreg", "rappdirs", "RcppArmadillo", "RCurl", "reprex", "rgl", "rmarkdown", "rvest", "shiny", "shinythemes", "SparseM", "stopwords", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "usethis", "utf8", "waldo", "withr", "xfun"))
library(rtweet)
setwd("~/GitHub/R-Community-Analysis")
creds <- read.csv('twitter_creds.csv')
View(creds)
View(creds)
creds <- read.csv('twitter_creds.csv')
View(creds)
creds <- read.csv('twitter_creds.csv', fileEncoding = "UTF-8-BOM")
View(creds)
creds <- read.csv('twitter_creds.csv', fileEncoding = "UTF-8-BOM")
# store api keys
api_key <- creds$API_key
api_secret_key <- creds$API_secret
access_token <- creds$Access_token
access_secret <- creds$Access_token_secret
access_secret
twitter_pass <- create_token(
app = "RtweetsExploration",
consumer_key = api_key,
consumer_secret = api_secret_key,
access_token = access_token,
access_secret = access_secret
)
class(api_key)
as.character(api_key)
# store api keys
api_key <- as.character(creds$API_key)
api_secret_key <- as.character(creds$API_secret)
access_token <- as.character(creds$Access_token)
access_secret <- as.character(creds$Access_token_secret)
twitter_pass <- create_token(
app = "RtweetsExploration",
consumer_key = api_key,
consumer_secret = api_secret_key,
access_token = access_token,
access_secret = access_secret
)
twitter_pass
View(twitter_pass)
rt <- search_tweets("#rstats", n=5, include_rts = FALSE, retryonratelimit = F)
create_token()
twitter_pass <- create_token(
app = "RtweetsExploration",
consumer_key = api_key,
consumer_secret = api_secret_key,
access_token = access_token,
access_secret = access_secret
)
twitter_pass
rt <- search_tweets("#rstats", n=5, include_rts = FALSE, retryonratelimit = F)
creds <- read.csv('twitter_creds.csv', fileEncoding = "UTF-8-BOM")
# store api keys
api_key <- as.character(creds$API_key)
api_secret_key <- as.character(creds$API_secret)
access_token <- as.character(creds$Access_token)
# store api keys
api_key <- as.character(creds$API_key)
api_secret_key <- as.character(creds$API_secret)
acc_token <- as.character(creds$Access_token)
acc_secret <- as.character(creds$Access_token_secret)
twitter_pass <- create_token(
app = "RtweetsExploration",
consumer_key = api_key,
consumer_secret = api_secret_key,
access_token = acc_token,
access_secret = acc_secret
)
twitter_pass
rt <- search_tweets("#rstats", n=5, include_rts = FALSE, retryonratelimit = F)
token <- create_token(
app = "RtweetsExploration",
consumer_key = api_key,
consumer_secret = api_secret_key
)
rt <- search_tweets("#rstats", n=5, include_rts = FALSE, retryonratelimit = F)
rt <- search_tweets(q="#rstats", n=50)
rm(list = ls())
get_token()
earch_tweets(q="#rstats", n=50)
search_tweets(q="#rstats", n=50)
library(rtweet)
creds <- read.csv('twitter_creds.csv', fileEncoding = "UTF-8-BOM")
# store api keys
api_key <- as.character(creds$API_key)
api_secret_key <- as.character(creds$API_secret)
token <- create_token(
app = "RtweetsExploration",
consumer_key = api_key,
consumer_secret = api_secret_key
)
rt <- search_tweets(q="#rstats", n=50, include_rts = FALSE)
install.packages("rtweet")
install.packages("rtweet")
rt <- search_tweets(q="#rstats", n=50, include_rts = FALSE, token)
library(rtweet)
rt <- search_tweets(q="#rstats", n=50, include_rts = FALSE, token)
rt <- search_tweets(q="#rstats", n=50, include_rts = FALSE)
