wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(length(wbpg_items)==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
View(cmt_df)
Comnt_query <- function(quesId){
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(length(wbpg_items)==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
cmt_df
}
asdfff <- Comnt_query(quesId)
# Obtaining Question IDs from `Query_df` function
questionId <- Ques_df$ID
Comnt_query <- function(quesId){
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(length(wbpg_items)==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
cmt_df
}
asdfff <- Comnt_query(questionId)
Comnt_query <- function(quesId){
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
i <- 1
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(length(wbpg_items)==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
cmt_df
}
Comnt_query <- function(quesId){
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
i <- 1
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(length(wbpg_items)==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
cmt_df
}
asdfff <- Comnt_query(questionId)
rm(list = ls())
key <- "SX945TWflISfN*DzZ*G53w(("
token <- "ixiOsNGGzzlmAyggyT1rRA))"
library(httr)
library(rlist)
library(jsonlite)
library(dplyr)
library(lubridate)
Ques_query <- function(fromDate, toDate, pg=1){
fromDate <- as.numeric(as.POSIXct(fromDate, tz="UTC"))
toDate <- as.numeric(as.POSIXct(toDate, tz="UTC"))
ques_df <- data.frame(ID=integer(), Title=character(), View_Count=integer(),
Answer=logical(), Link=character())
repeat{
wbpg <- paste0("https://api.stackexchange.com/2.2/questions?key=", key, "&page=", pg, "&pagesize=100&fromdate=", fromDate, "&todate=", toDate, "&order=desc&sort=activity&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
if(length(wbpg_items)==0){
break
}
len <- as.vector(1:length(wbpg_items))
quesId <- lapply(len, function(x){wbpg_items[[x]][["question_id"]]})
quesTitle <- lapply(len, function(x){wbpg_items[[x]][["title"]]})
quesViewCount <- lapply(len, function(x){wbpg_items[[x]][["view_count"]]})
quesAnswered <- lapply(len, function(x){wbpg_items[[x]][["is_answered"]]})
quesLink <- lapply(len, function(x){wbpg_items[[x]][["link"]]})
df <- data.frame(ID=unlist(quesId), Title=unlist(quesTitle), View_Count=unlist(quesViewCount),
Answer=unlist(quesAnswered), Link=unlist(quesLink))
ques_df <- rbind(ques_df, df)
pg <- pg + 1
}
ques_df
}
# Obtaining list of Question IDs whose Answer is PRESENT on Stack Overflow
Ques_df <- Ques_query("2021-01-01", "2021-01-02")
temp_ques_df <- filter(Ques_df, Answer==TRUE)
questionId <- temp_ques_df$ID
Ans_query <- function(quesId){
ans_df <- data.frame(QuestionID=integer(), AnswerID=integer(),
CreationDate=POSIXct(), Score=integer(), Accepted=logical())
i <- 1
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/answers?key=", key, "&pagesize=100&order=desc&sort=activity&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
qId <- lapply(len, function(x){wbpg_items[[x]][["question_id"]]})
aId <- lapply(len, function(x){wbpg_items[[x]][["answer_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
isAcc <- lapply(len, function(x){wbpg_items[[x]][["is_accepted"]]})
df <- data.frame(QuestionID=unlist(qId), AnswerID=unlist(aId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc), Accepted=unlist(isAcc))
ans_df <- rbind(ans_df, df)
i <- i+1
}
ans_df
}
asdm <- Ans_query(questionId)
# Obtaining Question IDs from `Query_df` function
questionId <- Ques_df$ID
Comnt_query <- function(quesId){
cmt_df <- data.frame(PostID=integer(), CommentID=integer(),
CreationDate=POSIXct(), Score=integer())
i <- 1
repeat{
if(i>length(quesId)){
break
}
wbpg <- paste0("https://api.stackexchange.com/2.2/questions/", quesId[i], "/comments?key=", key, "&pagesize=100&order=desc&sort=votes&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
len <- as.vector(1:length(wbpg_items))
if(length(wbpg_items)==0){
i <- i+1
next
}
pId <- lapply(len, function(x){wbpg_items[[x]][["post_id"]]})
cmtId <- lapply(len, function(x){wbpg_items[[x]][["comment_id"]]})
creaDate <- lapply(len, function(x){wbpg_items[[x]][["creation_date"]]})
sc <- lapply(len, function(x){wbpg_items[[x]][["score"]]})
df <- data.frame(PostID=unlist(pId), CommentID=unlist(cmtId), CreationDate=as_datetime(unlist(creaDate)),
Score=unlist(sc))
cmt_df <- rbind(cmt_df, df)
i <- i+1
}
cmt_df
}
meet <- Comnt_query(questionId)
View(meet)
rm(list = ls())
install.packages(c("backports", "broom", "cli", "cpp11", "crayon", "data.table", "dbplyr", "desc", "dplyr", "farver", "fastmap", "forcats", "gert", "ggforce", "ggraph", "htmltools", "isoband", "ISOcodes", "knitr", "lifecycle", "lubridate", "MatrixModels", "matrixStats", "memoise", "mime", "packageRank", "pillar", "pkgload", "promises", "ps", "quantreg", "rappdirs", "RcppArmadillo", "RCurl", "reprex", "rgl", "rmarkdown", "rvest", "shiny", "shinythemes", "SparseM", "stopwords", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "usethis", "utf8", "waldo", "withr", "xfun"))
# storing API keys
api_key <- "Vasln0HaAY8pkXu7J2xQkBX8c"
api_secret_key <- "h5ra23jvrY8nq7vkUBld1mXXYwjsKR5iyNoH2CATUNKO1rdzq3"
acc_token <- "1013338789580713984-2oRZj3Btzvgl0yZqJ8Wfr0GEmTzW34"
acc_secret <- "92oQXpMxvdNI7gwIAji2ZfEdN905eGudFoeNWd4sb6Wnn"
library(rtweet)
token <- create_token(
app = "RtweetsExploration",
consumer_key = api_key,
consumer_secret = api_secret_key,
access_token = acc_token,
access_secret = acc_secret
)
get_followers(user = "@sachin_rt")
get_followers(user = "sachin_rt")
get_followers(user = "@sachin_rt", n=100)
df <- get_followers(user = "@sachin_rt", n=100)
View(df)
usrs <- lookup_users(df$user_id)
View(usrs)
user_names <- usrs$screen_name
user_names
library(rtweet)
# searching for required #rstats tweets
rtweet_data <- search_tweets(q="#rstats", since = Sys.Date()-1,
until = Sys.Date(),
retryonratelimit = TRUE, include_rts = FALSE)
View(rtweet_data)
install.packages(c("bioC.logs", "BiocManager", "bitops", "brglm", "brio", "broom", "bslib", "cachem", "callr", "cli", "colorspace", "cpp11", "curl", "dbplyr", "devtools", "diffobj", "dplyr", "DT", "ellipsis", "entropy", "gert", "gh", "haven", "highr", "httpuv", "installr", "jquerylib", "knitr", "later", "lme4", "openintro", "openssl", "packageRank", "parsedate", "pdftools", "pillar", "pkgload", "processx", "raster", "rco", "RcppArmadillo", "RCurl", "remotes", "renv", "reprex", "rgl", "rlang", "rmarkdown", "sass", "statmod", "stringi", "systemfonts", "taskscheduleR", "tibble", "tidyselect", "tidytext", "tidyverse", "tinytex", "tweenr", "vctrs", "viridis", "viridisLite", "withr", "xfun"))
setwd("~/GitHub/R-Community-Analysis")
key <- "SX945TWflISfN*DzZ*G53w(("
token <- "ixiOsNGGzzlmAyggyT1rRA))"
library(httr)
library(rlist)
library(jsonlite)
library(dplyr)
library(lubridate)
fromDate <- "2021-01-01"
toDate <- "2021-01-02"
fromDate <- as.numeric(as.POSIXct(fromDate, tz="UTC"))
toDate <- as.numeric(as.POSIXct(toDate, tz="UTC"))
pg <- 1
wbpg <- paste0("https://api.stackexchange.com/2.2/questions?key=", key, "&page=", pg, "&pagesize=100&fromdate=", fromDate, "&todate=", toDate, "&order=desc&sort=activity&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
View(wbpg_items)
qdate <- purrr::map_chr(wbpg_items, "creation_date")
class(qdate)
library(purrr)
quesid <- map_chr(wbpg_items, "question_id")
class(quesid)
qscore = map_chr(wbpg_items, "score")
qtags = map(wbpg_items, "tags")
View(qtags)
qtags = map_chr(wbpg_items, "tags")
temp_df <- tibble(
qdate <- purrr::map_chr(wbpg_items, "creation_date"),
quesid <- map_chr(wbpg_items, "question_id"),
qscore = map_chr(wbpg_items, "score"),
qtags = map(wbpg_items, "tags")
)
View(temp_df)
temp_df <- tibble(
qdate <- map_chr(wbpg_items, "creation_date"),
quesid <- map_chr(wbpg_items, "question_id"),
qscore = map_chr(wbpg_items, "score"),
qtags = map(wbpg_items, "tags")
)
View(temp_df)
View(temp_df)
temp_df <- tibble(
Date = qdate,
ID = quesid,
Score = qscore,
Tags = qtags
)
View(temp_df)
View(wbpg_items)
temp_df <- tibble(
Date = qdate,
ID = quesid,
Score = qscore,
Tags = qtags,
resource = wbpg_items
)
View(temp_df)
quesDate <- map_chr(wbpg_items, "creation_date")
quesId <- map_chr(wbpg_items, "question_id")
quesTitle <- map_chr(wbpg_items, "title")
quesViewCount <- map_chr(wbpg_items, "view_count")
quesScore <- map_chr(wbpg_items, "score")
quesAnswered <- map_lgl(wbpg_items, "is_answered")
quesTags <- map(wbpg_items, "tags")
quesLink <- map_chr(wbpg_items, "link")
quesResource <- wbpg_items
temp_df <- tibble(
Date = quesDate,
ID = quesId,
Title = quesTitle,
View_Count = quesViewCount,
Score = quesScore,
Answer = quesAnswered,
Tags = quesTags,
Link = quesLink,
Resources = wbpg_items
)
View(temp_df)
class(temp_df$Date)
class(temp_df$ID)
class(temp_df$Title)
class(temp_df$View_Count)
sco <- map(wbpg_items, "score")
View(sco)
sco <- map_int(wbpg_items, "score")
quesDate <- map_chr(wbpg_items, "creation_date")
quesId <- map_int(wbpg_items, "question_id")
quesTitle <- map_chr(wbpg_items, "title")
quesViewCount <- map_int(wbpg_items, "view_count")
quesScore <- map_int(wbpg_items, "score")
quesAnswered <- map_lgl(wbpg_items, "is_answered")
quesTags <- map(wbpg_items, "tags")
quesLink <- map_chr(wbpg_items, "link")
quesResource <- wbpg_items
temp_df <- tibble(
Date = quesDate,
ID = quesId,
Title = quesTitle,
View_Count = quesViewCount,
Score = quesScore,
Answer = quesAnswered,
Tags = quesTags,
Link = quesLink,
Resources = wbpg_items
)
View(temp_df)
class(temp_df$Date)
class(temp_df$ID)
class(temp_df$Title)
class(temp_df$View_Count)
class(temp_df$Score)
class(temp_df$Answer)
class(temp_df$Tags)
class(temp_df$Link)
class(temp_df$Resources)
ques_df <- data.frame(Date=character(),ID=integer(), Title=character(), View_Count=integer(),
Score=integer(),Answer=logical(),Tags=list(), Link=character(),Resources=list())
View(ques_df)
df <- tibble(
Date = quesDate,
ID = quesId,
Title = quesTitle,
View_Count = quesViewCount,
Score = quesScore,
Answer = quesAnswered,
Tags = quesTags,
Link = quesLink,
Resources = wbpg_items
)
ques_df <- rbind(ques_df, df)
View(ques_df)
View(ques_df)
rm(list = ls())
key <- "SX945TWflISfN*DzZ*G53w(("
token <- "ixiOsNGGzzlmAyggyT1rRA))"
library(httr)
library(rlist)
library(jsonlite)
library(dplyr)
library(lubridate)
library(purrr)
Ques_query <- function(fromDate, toDate, pg=1){
fromDate <- as.numeric(as.POSIXct(fromDate, tz="UTC"))
toDate <- as.numeric(as.POSIXct(toDate, tz="UTC"))
ques_df <- data.frame(Date=character(),ID=integer(), Title=character(), View_Count=integer(),
Score=integer(),Answer=logical(),Tags=list(), Link=character(),Resources=list())
repeat{
wbpg <- paste0("https://api.stackexchange.com/2.2/questions?key=", key, "&page=", pg, "&pagesize=100&fromdate=", fromDate, "&todate=", toDate, "&order=desc&sort=activity&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
if(length(wbpg_items)==0){
break
}
quesDate <- map_chr(wbpg_items, "creation_date")
quesId <- map_int(wbpg_items, "question_id")
quesTitle <- map_chr(wbpg_items, "title")
quesViewCount <- map_int(wbpg_items, "view_count")
quesScore <- map_int(wbpg_items, "score")
quesAnswered <- map_lgl(wbpg_items, "is_answered")
quesTags <- map(wbpg_items, "tags")
quesLink <- map_chr(wbpg_items, "link")
quesResource <- wbpg_items
df <- tibble(
Date = quesDate, ID = quesId,
Title = quesTitle, View_Count = quesViewCount,
Score = quesScore, Answer = quesAnswered,
Tags = quesTags, Link = quesLink,
Resources = wbpg_items
)
ques_df <- rbind(ques_df, df)
pg <- pg + 1
}
ques_df
}
temp_df <- Ques_query("2021-01-01", "2021-01-02")
temp_df <- Ques_query("2021-01-01", "2021-01-05")
View(temp_df)
temp_df <- Ques_query("2021-01-01", "2021-01-02")
as.Date("2021-01-01")
as.Date("2021-01-01")-30
fd <- "2021-01-01"
td <- as.Date(fd) - 30
td <- as.character(as.Date(fd) - 30)
View(temp_df)
head(arrange(temp_df, desc(View_Count)), n=20)
aadf <- head(arrange(temp_df, desc(View_Count)), n=20)
View(aadf)
fromDate <- "2021-01-01"
toDate <- as.character(as.Date(fromDate)-30)
ques_df <- Ques_query(fromDate, toDate)
View(ques_df)
qwdf <- Ques_query("2021-01-01", "2020-12-02")
toDate <- "2021-01-01"
fromDate <- as.character(as.Date(toDate)-30)
ques_df <- Ques_query(fromDate, toDate)
View(ques_df)
topques_df <- head(arrange(ques_df, desc(View_Count)), n=20)
top_ques_df <- head(arrange(ques_df, desc(View_Count)), n=20)
View(top_ques_df)
View(top_ques_df)
TopQues_query <- function(toDate){
fromDate <- as.character(as.Date(toDate)-30)
ques_df <- Ques_query(fromDate, toDate)
top_ques_df <- head(arrange(ques_df, desc(View_Count)), n=20)
top_ques_df
}
rm(list = ls())
Ques_query <- function(fromDate, toDate, pg=1){
fromDate <- as.numeric(as.POSIXct(fromDate, tz="UTC"))
toDate <- as.numeric(as.POSIXct(toDate, tz="UTC"))
ques_df <- data.frame(Date=character(),ID=integer(), Title=character(), View_Count=integer(),
Score=integer(),Answer=logical(),Tags=list(), Link=character(),Resources=list())
repeat{
wbpg <- paste0("https://api.stackexchange.com/2.2/questions?key=", key, "&page=", pg, "&pagesize=100&fromdate=", fromDate, "&todate=", toDate, "&order=desc&sort=activity&access_token=", token, "&tagged=r&site=stackoverflow")
wbpg <- GET(wbpg)
wbpg_jsonParsed <- content(wbpg, as="parsed")
wbpg_items <- wbpg_jsonParsed$items
if(length(wbpg_items)==0){
break
}
quesDate <- map_chr(wbpg_items, "creation_date")
quesId <- map_int(wbpg_items, "question_id")
quesTitle <- map_chr(wbpg_items, "title")
quesViewCount <- map_int(wbpg_items, "view_count")
quesScore <- map_int(wbpg_items, "score")
quesAnswered <- map_lgl(wbpg_items, "is_answered")
quesTags <- map(wbpg_items, "tags")
quesLink <- map_chr(wbpg_items, "link")
quesResource <- wbpg_items
df <- tibble(
Date = quesDate, ID = quesId,
Title = quesTitle, View_Count = quesViewCount,
Score = quesScore, Answer = quesAnswered,
Tags = quesTags, Link = quesLink,
Resources = wbpg_items
)
ques_df <- rbind(ques_df, df)
pg <- pg + 1
}
ques_df
}
TopQues_query <- function(toDate){
fromDate <- as.character(as.Date(toDate)-30)
ques_df <- Ques_query(fromDate, toDate)
top_ques_df <- head(arrange(ques_df, desc(View_Count)), n=20)
top_ques_df
}
final_df <- TopQues_query("2021-01-01")
key <- "SX945TWflISfN*DzZ*G53w(("
token <- "ixiOsNGGzzlmAyggyT1rRA))"
final_df <- TopQues_query("2021-01-01")
View(final_df)
